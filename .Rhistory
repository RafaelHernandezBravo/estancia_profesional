# Métricas
tir_desapalancada <- irr(flujo$flujo_libre)
tir_apalancada <- irr(flujo$flujo_apalancado)
inversion_total <- sum(flujo$egresos - flujo$deuda)
utilidad <- sum(flujo$flujo_apalancado[flujo$saldo_deuda == 0])
margen <- utilidad / inversion_total
moic_desapalancado <- sum(flujo$flujo_libre) / inversion_total
moic_apalancado <- sum(flujo$flujo_apalancado[flujo$saldo_deuda == 0]) / (inversion_total)
ltv <- credito_construccion / ventas_totales
ltc <- credito_construccion / sum(flujo$egresos)
# Resultados
cat("TIR desapalancada:", round(tir_desapalancada * 12 * 100, 2), "%\n")
cat("TIR apalancada:", round(tir_apalancada * 12 * 100, 2), "%\n")
cat("Utilidad:", round(utilidad, 2), "\n")
cat("Margen utilidad:", round(margen * 100, 2), "%\n")
cat("MOIC desapalancado:", round(moic_desapalancado, 2), "\n")
cat("MOIC apalancado:", round(moic_apalancado, 2), "\n")
write.csv(flujo, "flujo.csv", row.names = F)
getwd()
install.packages("httr")
install.packages("jsonlite")
library(httr)
library(jsonlite)
# Cargando datos saltando la primer fila porque sólo contamos con
# 14 nombres y tenemos 20 columnas
db = read.csv("g00I40976.694.csv", sep =",", skip = 1, header = F)
setwd("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r")
# Cargando datos saltando la primer fila porque sólo contamos con
# 14 nombres y tenemos 20 columnas
db = read.csv("g00I40976.694.csv", sep =",", skip = 1, header = F)
db = db[,1:14]
# Leyendo la primer línea que tiene a los 14 nombres
nombres_columnas = readLines("g00I40976.694.csv")
nombres_columnas[1]
# Separando a la primer línea del archivo por el patrón " , "
nombres_limpios = strsplit(nombres_columnas[1], split = " , ")[[1]]
# Asignando los 14 nombres limpios a las 14 columnas
colnames(db) = nombres_limpios
casetas = unique(db$`Nombre de caseta`)
casetas
casetas = paste("CASETA", unique(db$`Nombre de caseta`))
casetas
# Función para obtener latitud y longitud usando Nominatim
get_coordinates_osm <- function(place) {
base_url <- "https://nominatim.openstreetmap.org/search"
# Hacer la solicitud GET
res <- GET(url = base_url,
query = list(q = place, format = "json", limit = 1),
user_agent("R geocoder"))
data <- fromJSON(content(res, "text", encoding = "UTF-8"))
if (length(data) > 0) {
lat <- as.numeric(data$lat[1])
lon <- as.numeric(data$lon[1])
return(data.frame(place = place, lat = lat, lon = lon))
} else {
warning(paste("No se pudo geocodificar:", place))
return(data.frame(place = place, lat = NA, lon = NA))
}
}
# Aplicar la función a todas las casetas
resultado_osm <- do.call(rbind, lapply(casetas, get_coordinates_osm))
View(resultado_osm)
casetas
unique(db$`Nombre de caseta`)
grep(unique(db$`Nombre de caseta`), pattern = "tlalpan", ignore.case = T)
grep(unique(db$`Nombre de caseta`), pattern = "sinaloa", ignore.case = T)
grep(unique(db$`Nombre de caseta`), pattern = "sinaloa", ignore.case = T,value = T)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
# Detectando casetas duplicadas por viaje
table(db_unidad$n_viaje, db_unidad$`Nombre de caseta`)
View(db)
View(db_unidad)
# Cargando casetas autorizadas para ida durante todo el día
# y regreso antes de las 12:00 pm
casetas_autorizadas = read.csv("casetas_autorizadas.csv")
casetas_autorizadas
casetas_autorizadas = casetas_autorizadas[casetas_autorizadas$X==1,]
casetas_autorizadas
# Cargando casetas autorizadas para ida durante todo el día
# y regreso antes de las 12:00 pm
casetas_autorizadas = na.omit(read.csv("casetas_autorizadas.csv"))
casetas_autorizadas
rownames(casetas_autorizadas) = NULL
casetas_autorizadas
casetas_autorizadas = casetas_autorizadas$X.Nombre.de.caseta
casetas_autorizadas
nombres_limpios
# Asignando los 14 nombres limpios a las 14 columnas
colnames(db) = gsub(nombres_limpios, pattern = " $", replacement = "")
nombres_limpios
db
colnames(db)
# A continuación unimos columna de fecha con columna de hora
fecha_hora = paste(db$`Fecha de cruce`, db$`Hora de cruce`)
# Convertimos el string de caracteres a tipo fecha-hora y creamos una
# nueva columna llamada fecha_hora
db$fecha_hora = as.POSIXct(fecha_hora, format = "%Y/%m/%d %H:%M:%S" )
# Extrayendo cuántas unidades hay en este reporte decenal
unidades = unique(db$`Tarjeta IDMX`)# Hay 8 unidades
table(db$`Tarjeta IDMX`)
colnames(db)
# Cargando datos saltando la primer fila porque sólo contamos con
# 14 nombres y tenemos 20 columnas
db = read.csv("g00I40976.694.csv", sep =",", skip = 1, header = F)
db = db[,1:14]
# Leyendo la primer línea que tiene a los 14 nombres
nombres_columnas = readLines("g00I40976.694.csv")
nombres_columnas[1]
# Separando a la primer línea del archivo por el patrón " , "
nombres_limpios = strsplit(nombres_columnas[1], split = " , ")[[1]]
# Asignando los 14 nombres limpios a las 14 columnas
colnames(db) = gsub(nombres_limpios, pattern = " $", replacement = "") db$
# Asignando los 14 nombres limpios a las 14 columnas
colnames(db) = gsub(nombres_limpios, pattern = " $", replacement = "")
colnames(db)
db$`Nombre de caseta`
db$`Nombre de caseta` = gsub(db$`Nombre de caseta`, pattern = " $", replacement = "")
db$`Nombre de caseta`
db$`Nombre de caseta` = gsub(db$`Nombre de caseta`, pattern = " $", replacement = "")
db$`Nombre de caseta`
db$`Nombre de caseta` = gsub(db$`Nombre de caseta`, pattern = " *$", replacement = "")
db$`Nombre de caseta`
casetas_autorizadas = gsub(casetas_autorizadas$X.Nombre.de.caseta, pattern = " *$", replacement = "")
casetas_autorizadas = gsub(casetas_autorizadas$X.Nombre.de.caseta, pattern = " *$", replacement = "")
# Cargando casetas autorizadas para ida durante todo el día
# y regreso antes de las 12:00 pm
casetas_autorizadas = na.omit(read.csv("casetas_autorizadas.csv"))
rownames(casetas_autorizadas) = NULL
casetas_autorizadas = gsub(casetas_autorizadas$X.Nombre.de.caseta, pattern = " *$", replacement = "")
casetas_autorizadas
# Detectando casetas duplicadas por viaje
table(db_unidad$n_viaje, db_unidad$`Nombre de caseta`)
# Detectando casetas duplicadas por viaje
tabla_viajes_casetas = table(db_unidad$n_viaje, db_unidad$`Nombre de caseta`)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
View(db_unidad)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes)) {
db_unidad_viaje = db_unidad %>%
filter(viaje_n == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
}
for(i in 1:length(viajes_unidad)) {
db_unidad_viaje = db_unidad %>%
filter(viaje_n == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
}
for(i in 1:length(viajes_unidad)) {
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
}
for(i in 1:length(viajes_unidad)) {
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
}
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes_unidad)) {
print(i)
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
}
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes_unidad)) {
print(i)
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
if(any(tab_unidad_viaje > 1)) {
print("hay casetas usadas dos veces dentro de este viaje")
}
}
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes_unidad)) {
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
if(any(tab_unidad_viaje > 1)) {
print(paste("hay casetas usadas dos veces dentro del viaje ",i))
}
}
for(i in 1:length(viajes_unidad)) {
print(paste("Auditando viaje",i))
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
if(any(tab_unidad_viaje > 1)) {
print(paste("hay casetas usadas dos veces dentro del viaje ",i))
}
}
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
for(i in 1:length(viajes_unidad)) {
print(paste("Auditando viaje",i))
db_unidad_viaje = db_unidad %>%
filter(n_viaje == i)
tab_unidad_viaje = table(db_unidad_viaje$`Nombre de caseta`)
print(tab_unidad_viaje)
if(any(tab_unidad_viaje > 1)) {
print(paste("hay casetas usadas dos veces dentro del viaje ",i))
# Verificar que la segunda vez que se usa la caseta ésta esté en
# la lista de casetas autorizadas de regreso, en el caso del segundo piso
# verificar que la caseta haya sido usada antes de las 12:00 pm
print(names(which(tab_unidad_viaje == 2)))
}
}
# Verificar que la segunda vez que se usa la caseta ésta esté en
# la lista de casetas autorizadas de regreso, en el caso del segundo piso
# verificar que la caseta haya sido usada antes de las 12:00 pm
casetas_usadas_2_veces = names(which(tab_unidad_viaje == 2))
print(casetas_usadas_2_veces)
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes_unidad)) {
k
)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
# Detectando casetas no autorizadas por viaje
viajes_unidad = unique(db_unidad$n_viaje)
for(i in 1:length(viajes_unidad)) {
)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
tab_unidad_viaje
casetas_usadas_2_veces
casetas_autorizadas
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
casetas_autorizadas
casetas_autorizadas_viaje = intersect(casetas_autorizadas, casetas_usadas_2_veces)
casetas_autorizadas_viaje
segundo_piso = c("SEGUNDO PISO", "VET", "SEG PISO A.U. NORTE")
db_unidad_segundo_piso = db_unidad %>%
filter(´Nombre de caseta´ %in% segundo_piso_usadas)
db_unidad_segundo_piso = db_unidad %>%
filter(´Nombre de caseta´ %in% segundo_piso_usadas)
db_unidad_segundo_piso = db_unidad %>%
filter(`Nombre de caseta`%in% segundo_piso_usadas)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
db_hora_segundo_piso$fecha_hora
as.Date(db_hora_segundo_piso$fecha_hora)
tabla_viajes_casetas
as.POSIXct(paste(fecha,"12:00:00"), format = "%Y/%m/%d %H:%M:%S" )
fecha = unique(as.Date(db_hora_segundo_piso$fecha_hora))
limite_segund_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y/%m/%d %H:%M:%S" )
limite_segund_piso
paste(fecha,"12:00:00")
limite_segund_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S" )
limite_segund_piso
limite_segundo_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S" )
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
unique(db$`Tarjeta IDMX`)
unidades
unidad
print(paste("EVALUANDO LA UNIDAD"), unidad)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
casetas_autorizadas_viaje
any(casetas_autorizadas_viaje %in% segundo_piso)
#Revisando la hora a la que se usó el segundo piso de regreso
segundo_piso_usadas = intersect(casetas_autorizadas_viaje, segundo_piso)
segundo_piso_usadas
db_unidad_segundo_piso = db_unidad_viaje %>%
filter(`Nombre de caseta`%in% segundo_piso_usadas)
db_unidad_segundo_piso
db_hora_segundo_piso = db_unidad_segundo_piso[duplicated(db_unidad_segundo_piso$`Nombre de caseta`), c("Nombre de caseta","fecha_hora")]
db_hora_segundo_piso
fecha = unique(as.Date(db_hora_segundo_piso$fecha_hora))
fecha
limite_segundo_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S")
limite_segundo_piso
reclamo_segundo_piso = db_unidad_segundo_piso[db_unidad_segundo_piso$fecha_hora > limite_segund_piso,c("n_viaje", "Nombre de caseta", "fecha_hora", "Importe al 100%")]
reclamo_segundo_piso
limite_segundo_piso
db_unidad_segundo_piso$fecha_hora
db_unidad_segundo_piso$fecha_hora > limite_segund_piso
db_unidad_segundo_piso$fecha_hora
db_unidad_segundo_piso$fecha_hora[2]
db_unidad_segundo_piso$fecha_hora[2] > limite_segund_piso
db_unidad_segundo_piso$fecha_hora[2] < limite_segund_piso
limite_segund_piso
db_hora_segundo_piso
fecha = unique(as.Date(db_hora_segundo_piso$fecha_hora))
fecha
limite_segundo_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S")
limite_segundo_piso
db_unidad_segundo_piso$fecha_hora[2]
reclamo_segundo_piso = db_unidad_segundo_piso[db_unidad_segundo_piso$fecha_hora[2] < limite_segund_piso,c("n_viaje", "Nombre de caseta", "fecha_hora", "Importe al 100%")]
reclamo_segundo_piso
limite_segundo_piso
reclamo_segundo_piso = db_unidad_segundo_piso[db_unidad_segundo_piso$fecha_hora > limite_segund_piso,c("n_viaje", "Nombre de caseta", "fecha_hora", "Importe al 100%")]
reclamo_segundo_piso
fecha
db_hora_segundo_piso
fecha
limite_segundo_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S")
limite_segundo_piso
limite_segundo_piso = as.POSIXct(paste(fecha,"12:00:00"), format = "%Y-%m-%d %H:%M:%S")
reclamo_segundo_piso = db_unidad_segundo_piso[db_unidad_segundo_piso$fecha_hora > limite_segundo_piso,c("n_viaje", "Nombre de caseta", "fecha_hora", "Importe al 100%")]
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
View(db)
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/decenales_r/analisis_decenales.R")
setwd("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional")
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/descarga_denue.R")
warnings()
View(df)
download_url
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/descarga_denue.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/unzipping_denue.R")
df = read.csv("diccionario_denue_11_2024.csv", encoding = "latin1")
list.files(recursive = T)
list.files()
list.files(recursive = T)
# Obtener la lista de archivos .csv
list.files(pattern = "conjunto_de_datos", full.anmes = T)
# Obtener la lista de archivos .csv
list.files(pattern = "conjunto_de_datos", full.names = T)
# Obtener la lista de archivos .csv
list.files(pattern = "conjunto_de_datos", full.names = T)
# Obtener la lista de archivos .csv
list.files(pattern = "conjunto_de_datos", full.names = T, recursive = T)
# Obtener la lista de archivos .csv
list.files(pattern = "conjunto_de_datos", full.names = T, recursive = T)
# Obtener la lista de archivos .csv
list.files(full.names = T, recursive = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(full.names = T, recursive = T)
lista_archivos
grep(lista_archivos, pattern ="conjunto")
grep(lista_archivos, pattern ="conjunto", value = T)
grep(lista_archivos, pattern ="conjunto", value = F)
lista_archivos
grep(lista_archivos, pattern ="conjunto", value = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(pattern = "conjunto_de_datos", full.names = T, recursive = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(pattern = "conjunto", full.names = T, recursive = T)
lista_archivos
# Obtener la lista de archivos .csv
lista_archivos = list.files(full.names = T, recursive = T)
grep(lista_archivos, pattern ="conjunto", value = T)
View(df)
lista_archivos
grep(lista_archivos, pattern ="datos", value = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_20224", full.names = T, recursive = T)
lista_archivos
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", full.names = T, recursive = T)
lista_archivos
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", full.names = T)
lista_archivos
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", full.names = T, recursive = T)
lista_archivos
# Obtener la lista de archivos .csv
lista_archivos = list.files(full.names = T, recursive = T)
grep(lista_archivos, pattern ="datos", value = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T)
lista_archivos
lista_archivos = grepl(lista_archivos, pattern = ".zip")
lista_archivos
lista_archivos = !grepl(lista_archivos, pattern = ".zip")
lista_directorios = lsita_archivos[!grepl(lista_archivos, pattern = ".zip")]
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T)
lista_directorios = lsita_archivos[!grepl(lista_archivos, pattern = ".zip")]
lista_directorios = lista_archivos[!grepl(lista_archivos, pattern = ".zip")]
lista_directorios
lapply(lista_directorios, function(x)list.files(x,recursive = T))
lista_directorios[[21]]
View(df)
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T)
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T, recursive = T)
lista_archivos
A = grep(lista_archivos, pattern = "denue_inegi.+\\.csv$", value = T)
A
A = grep(lista_archivos, pattern = "denue_inegi.+\\.csv$", full.names = T, value = T)
A = grep(lista_archivos, pattern = "denue_inegi.+\\.csv$", value = T)
fx = function(x) {
D = read.csv(A[x], colClasses = "character")
id = paste(D$cve_ent, D$cve_mun, sep="_")
as.data.frame.matrix(table(id, D$codigo_act))}
Z = lapply(1:length(A), fx)
Z
str(Z)
path
A
strsplit(A, split = "/")
lapply(strsplit(A, split = "/"),x[[4]])
lapply(strsplit(A, split = "/"),function(x)x[[4]])
unlist(lapply(strsplit(A, split = "/"),function(x)x[[4]]))
names(Z) = gsub(unlist(lapply(strsplit(A, split = "/"),function(x)x[[4]])), pattern = "_.csv", replacement = "")
names(Z)
A
strsplit(A, split = "/")
strsplit(A, split = "/")
lapply(strsplit(A, split = "/"), function(x) x[4]))
lapply(strsplit(A, split = "/"), function(x) x[4])
unlist(lapply(strsplit(A, split = "/"), function(x) x[4]))
names(Z) = gsub(unlist(lapply(strsplit(A, split = "/"), function(x) x[4])), pattern = "_.csv", replacement = "")
names(Z)
names(Z) = gsub(unlist(lapply(strsplit(A, split = "/"), function(x) x[4])), pattern = "[_|].csv", replacement = "")
names(Z)
names(Z) = gsub(unlist(lapply(strsplit(A, split = "/"), function(x) x[4])), pattern = "(_|).csv", replacement = "")
names(Z)
A
gsub(A, pattern = ".+/", replacement = "")
gsub(gsub(A, pattern = ".+/", replacement = ""), pattern = "(_|).csv", replacement = "")
nombres = gsub(gsub(A, pattern = ".+/", replacement = ""), pattern = "(_|).csv", replacement = "")
names(Z) = nombres
names(Z)
A
gsub(A, pattern = "/conjunto.+", replacement = "")
ueconomicas = gsub(A, pattern = "\\./conjunto.+", replacement = "")
gsub(A, pattern = "\\./conjunto.+", replacement = "")
ueconomicas = gsub(gsub(A, pattern = "\\./conjunto.+", replacement = ""), pattern = ".+/", replacement = "")
ueconomicas
nombres
Z[4:7]
lista_comercio_al_pormenor = Z[4:7]
lapply(lista_comercio_al_pormenor)
lapply(lista_comercio_al_pormenor, dim)
# Transformar de TABLE a Data.frame.matrix, Realizar un Merge --> (Outter join) y Checar lo de Comercio al por menor para ver si es combeniente hacer un bine
Z[4]
lapply(lista_comercio_al_pormenor, dim)
db_comercio_al_pormenor = merge(lista_comercio_al_pormenor[[1]], lista_comercio_al_pormenor[[2]], by = 0, all = T)
View(db_comercio_al_pormenor)
rownames(db_comercio_al_pormenor) = db_comercio_al_pormenor$Row.names
db_comercio_al_pormenor$Row.names = NULL
seq_along(lista_comercio_al_pormenor)
lista_comercio_al_pormenor = Z[4:7]
for(i in seq_along(lista_comercio_al_pormenor)) {
if(i == 1 | i == 2) {
db_comercio_al_pormenor = merge(lista_comercio_al_pormenor[[1]], lista_comercio_al_pormenor[[2]], by = 0, all = T)
}else {
db_comercio_al_pormenor = merge(db_comercio_al_pormenor, lista_comercio_al_pormenor[[i]], by = 0, all = T)
}
rownames(db_comercio_al_pormenor) = db_comercio_al_pormenor$Row.names
db_comercio_al_pormenor$Row.names = NULL
}
lista_comercio_al_pormenor
ueconomicas
db_servicios_no_gubernamentales = merge(Z[[14]], Z[[15]], by = 0, all = T)
rownames(db_servicios_no_gubernamentales) = db_servicios_no_gubernamentales$Row.names
db_servicios_no_gubernamentales$Row.names = NULL
names(Z) = nombres
saveRDS(Z, "NOMBRE.rds")
source("~/Documents/datametrix/2025/proyectos/cineteca/clusters_twitter.R")
install.packages("rtweet")
install.packages("rtweet", repos = 'https://ropensci.r-universe.dev')
install.packages('rtweet')
setwd("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional")
df = read.csv("diccionario_denue_11_2024.csv", encoding = "latin1")
# Obtener la lista de archivos .csv
lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T, recursive = T)
lista_archivos
load("NOMBRE.rds")
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/procesando_denue_1.R")
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/procesando_denue_1.R")
save(Z, file = "NOMBRE.RData")
source("~/Documents/datametrix/2025/clases/TC/rafa/estancia_profesional/procesando_denue_2.R")
df = read.csv("diccionario_denue_11_2024.csv", encoding = "latin1")
# Obtener la lista de archivos .csv
# lista_archivos = list.files(path = "denue_11_2024", pattern = "",full.names = T, recursive = T)
load("NOMBRE.RData")
